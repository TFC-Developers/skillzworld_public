This document records our disdain for AMX Mod X and its chosen scripting language.

AMX Mod X uses an old version of the Small language, a version from around 2005, from before it was renamed to Pawn. This is made clear by the .sma source code extension. People call it Pawn, which is misleading.
https://github.com/compuphase/pawn/tree/master/doc
The "Pawn_Language_Guide.pdf", updated in 2016 at the time of writing, is of limited use and is often misleading as it pertains to the language as it has evolved after 2005.
https://www.doomworld.com/eternity/engine/smalldoc.pdf
https://www.doomworld.com/eternity/engine/smallguide.pdf
The outdated documentation is more representative (The Small Booklet - The Language), however it's unclear precisely what Small version AMX Mod X is derived from, and which changes were made to the syntax by the AMX Mod X team, if any.

AMX Mod X only allows the precache to be interacted with in the plugin_precache forward using the precache_* natives, offering no means to just check if a model is already precached. This could easily have been made available by exposing a native function that reads from the server_t struct.

The natives get_user_origin and set_user_origin operate on ints, not floats, for reasons unknown. They should be avoided whenever possible.
Use entity_set_origin/entity_set_vector and entity_get_vector instead to get the player's origin.

https://www.amxmodx.org/api/file/fopen
Mistake in documentation: "Example: "rb" opens a binary file for writing"

Constants stop being constant when arrays are involved.
This is valid:
    new const A = 123
    new const A2 = A
    new B[] = {123}
But this results in a "Must be constant expression" error:
    new const A = 123
    new B[] = {A}

The compiler provides a truncated listing of 16 options when requesting help the correct way:
    amxxpc --help
You have to trigger a file lookup failure to get the proper help listing of 29 options:
    amxxpc --asdf

There can only be a single tag across a variable amount of arguments, meaning type checking is not possible for string formatting functions like formatex, or others like engfunc, making typical errors like interpreting integers as floats completely silent.
The lack of this feature is surprising considering the effort put into type checking syntax in Small. Take this AMX Mod X code snippet as an example:
    TagCheck({_, Float}: x, x_tag = tagof x)
        console_print 0, "x=%d, unused x tag=%d, real x tag=%d, _:=%d, Float:=%d", x, tagof x, x_tag, tagof _:, tagof Float:
    RunTagCheck() {
        TagCheck 123
        TagCheck 123.0
    }